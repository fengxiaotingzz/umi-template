import services from "@/services/demo";
import {
  FooterToolbar,
  PageContainer,
  ProDescriptions,
  ProTable
} from "@ant-design/pro-components";
import { Button, Divider, Drawer, message } from "antd";
import React, { useRef, useState } from "react";
import CreateForm from "./components/CreateForm";
import UpdateForm from "./components/UpdateForm";
const { addUser, queryUserList, deleteUser, modifyUser } = services.UserController;
const handleAdd = async (fields) => {
  const hide = message.loading("\u6B63\u5728\u6DFB\u52A0");
  try {
    await addUser({ ...fields });
    hide();
    message.success("\u6DFB\u52A0\u6210\u529F");
    return true;
  } catch (error) {
    hide();
    message.error("\u6DFB\u52A0\u5931\u8D25\u8BF7\u91CD\u8BD5\uFF01");
    return false;
  }
};
const handleUpdate = async (fields) => {
  const hide = message.loading("\u6B63\u5728\u914D\u7F6E");
  try {
    await modifyUser(
      {
        userId: fields.id || ""
      },
      {
        name: fields.name || "",
        nickName: fields.nickName || "",
        email: fields.email || ""
      }
    );
    hide();
    message.success("\u914D\u7F6E\u6210\u529F");
    return true;
  } catch (error) {
    hide();
    message.error("\u914D\u7F6E\u5931\u8D25\u8BF7\u91CD\u8BD5\uFF01");
    return false;
  }
};
const handleRemove = async (selectedRows) => {
  const hide = message.loading("\u6B63\u5728\u5220\u9664");
  if (!selectedRows)
    return true;
  try {
    await deleteUser({
      userId: selectedRows.find((row) => row.id)?.id || ""
    });
    hide();
    message.success("\u5220\u9664\u6210\u529F\uFF0C\u5373\u5C06\u5237\u65B0");
    return true;
  } catch (error) {
    hide();
    message.error("\u5220\u9664\u5931\u8D25\uFF0C\u8BF7\u91CD\u8BD5");
    return false;
  }
};
const TableList = () => {
  const [createModalVisible, handleModalVisible] = useState(false);
  const [updateModalVisible, handleUpdateModalVisible] = useState(false);
  const [stepFormValues, setStepFormValues] = useState({});
  const actionRef = useRef();
  const [row, setRow] = useState();
  const [selectedRowsState, setSelectedRows] = useState([]);
  const columns = [
    {
      title: "\u540D\u79F0",
      dataIndex: "name",
      tip: "\u540D\u79F0\u662F\u552F\u4E00\u7684 key",
      formItemProps: {
        rules: [
          {
            required: true,
            message: "\u540D\u79F0\u4E3A\u5FC5\u586B\u9879"
          }
        ]
      }
    },
    {
      title: "\u6635\u79F0",
      dataIndex: "nickName",
      valueType: "text"
    },
    {
      title: "\u6027\u522B",
      dataIndex: "gender",
      hideInForm: true,
      valueEnum: {
        0: { text: "\u7537", status: "MALE" },
        1: { text: "\u5973", status: "FEMALE" }
      }
    },
    {
      title: "\u64CD\u4F5C",
      dataIndex: "option",
      valueType: "option",
      render: (_, record) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
        "a",
        {
          onClick: () => {
            handleUpdateModalVisible(true);
            setStepFormValues(record);
          }
        },
        "\u914D\u7F6E"
      ), /* @__PURE__ */ React.createElement(Divider, { type: "vertical" }), /* @__PURE__ */ React.createElement("a", { href: "" }, "\u8BA2\u9605\u8B66\u62A5"))
    }
  ];
  return /* @__PURE__ */ React.createElement(
    PageContainer,
    {
      header: {
        title: "CRUD \u793A\u4F8B"
      }
    },
    /* @__PURE__ */ React.createElement(
      ProTable,
      {
        headerTitle: "\u67E5\u8BE2\u8868\u683C",
        actionRef,
        rowKey: "id",
        search: {
          labelWidth: 120
        },
        toolBarRender: () => [
          /* @__PURE__ */ React.createElement(
            Button,
            {
              key: "1",
              type: "primary",
              onClick: () => handleModalVisible(true)
            },
            "\u65B0\u5EFA"
          )
        ],
        request: async (params, sorter, filter) => {
          const { data, success } = await queryUserList({
            ...params,
            // FIXME: remove @ts-ignore
            // @ts-ignore
            sorter,
            filter
          });
          return {
            data: data?.list || [],
            success
          };
        },
        columns,
        rowSelection: {
          onChange: (_, selectedRows) => setSelectedRows(selectedRows)
        }
      }
    ),
    selectedRowsState?.length > 0 && /* @__PURE__ */ React.createElement(
      FooterToolbar,
      {
        extra: /* @__PURE__ */ React.createElement("div", null, "\u5DF2\u9009\u62E9", " ", /* @__PURE__ */ React.createElement("a", { style: { fontWeight: 600 } }, selectedRowsState.length), " ", "\u9879\xA0\xA0")
      },
      /* @__PURE__ */ React.createElement(
        Button,
        {
          onClick: async () => {
            await handleRemove(selectedRowsState);
            setSelectedRows([]);
            actionRef.current?.reloadAndRest?.();
          }
        },
        "\u6279\u91CF\u5220\u9664"
      ),
      /* @__PURE__ */ React.createElement(Button, { type: "primary" }, "\u6279\u91CF\u5BA1\u6279")
    ),
    /* @__PURE__ */ React.createElement(
      CreateForm,
      {
        onCancel: () => handleModalVisible(false),
        modalVisible: createModalVisible
      },
      /* @__PURE__ */ React.createElement(
        ProTable,
        {
          onSubmit: async (value) => {
            const success = await handleAdd(value);
            if (success) {
              handleModalVisible(false);
              if (actionRef.current) {
                actionRef.current.reload();
              }
            }
          },
          rowKey: "id",
          type: "form",
          columns
        }
      )
    ),
    stepFormValues && Object.keys(stepFormValues).length ? /* @__PURE__ */ React.createElement(
      UpdateForm,
      {
        onSubmit: async (value) => {
          const success = await handleUpdate(value);
          if (success) {
            handleUpdateModalVisible(false);
            setStepFormValues({});
            if (actionRef.current) {
              actionRef.current.reload();
            }
          }
        },
        onCancel: () => {
          handleUpdateModalVisible(false);
          setStepFormValues({});
        },
        updateModalVisible,
        values: stepFormValues
      }
    ) : null,
    /* @__PURE__ */ React.createElement(
      Drawer,
      {
        width: 600,
        open: !!row,
        onClose: () => {
          setRow(void 0);
        },
        closable: false
      },
      row?.name && /* @__PURE__ */ React.createElement(
        ProDescriptions,
        {
          column: 2,
          title: row?.name,
          request: async () => ({
            data: row || {}
          }),
          params: {
            id: row?.name
          },
          columns
        }
      )
    )
  );
};
export default TableList;
