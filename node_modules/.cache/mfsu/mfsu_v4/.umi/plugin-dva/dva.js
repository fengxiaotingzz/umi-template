import { create, Provider } from "dva";
import createLoading from "/Users/xiaotingfeng/demo/umi-demo/umi-demo2/node_modules/dva-loading/dist/index.js";
import React, { useRef } from "react";
import { history, ApplyPluginsType, useAppData } from "umi";
import { models } from "./models";
let dvaApp;
export function RootContainer(props) {
  const { pluginManager } = useAppData();
  const app = useRef();
  const runtimeDva = pluginManager.applyPlugins({
    key: "dva",
    type: ApplyPluginsType.modify,
    initialValue: {}
  });
  if (!app.current) {
    app.current = create(
      {
        history,
        ...runtimeDva.config || {}
      },
      {
        initialReducer: {},
        setupMiddlewares(middlewares) {
          return [...middlewares];
        },
        setupApp(app2) {
          app2._history = history;
        }
      }
    );
    dvaApp = app.current;
    app.current.use(createLoading());
    (runtimeDva.plugins || []).forEach((p) => {
      app.current.use(p);
    });
    for (const id of Object.keys(models)) {
      app.current.model({
        namespace: models[id].namespace,
        ...models[id].model
      });
    }
    app.current.start();
  }
  return /* @__PURE__ */ React.createElement(Provider, { store: app.current._store }, props.children);
}
export function getDvaApp() {
  return dvaApp;
}
