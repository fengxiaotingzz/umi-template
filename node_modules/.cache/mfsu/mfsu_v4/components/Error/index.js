import * as React from "react";
class WrapComponent extends React.Component {
  componentWillUnmount() {
  }
  render() {
    return /* @__PURE__ */ React.createElement("div", null, this.props.children);
  }
}
class DefaultFallback extends React.Component {
  render() {
    return /* @__PURE__ */ React.createElement("div", null, "\u51FA\u9519\u5566");
  }
}
export class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      hasError: false,
      error: {
        message: "",
        stack: "",
        name: ""
      },
      errorInfo: {
        componentStack: ""
      }
    };
  }
  componentDidCatch(error, errorInfo) {
    this.setState({
      hasError: true,
      error,
      errorInfo
    });
  }
  render() {
    const { hasError, error, errorInfo } = this.state;
    const FallbackComponent = this.props.FallbackComponent || DefaultFallback;
    return hasError ? /* @__PURE__ */ React.createElement(
      FallbackComponent,
      {
        title: error.name,
        componentStack: errorInfo.componentStack,
        errorMessage: error.message,
        stack: error.stack
      }
    ) : /* @__PURE__ */ React.createElement(React.Fragment, null, this.props.children);
  }
}
export const withErrorBoundary = (Component, FallbackComponent) => {
  const Wrapped = (props) => /* @__PURE__ */ React.createElement(ErrorBoundary, { FallbackComponent }, /* @__PURE__ */ React.createElement(WrapComponent, null, /* @__PURE__ */ React.createElement(Component, { ...props })));
  const name = Component.displayName || Component.name || "Unknown";
  Wrapped.displayName = `withErrorBoundary(${name})`;
  return Wrapped;
};
